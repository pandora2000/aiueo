type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | FLOAT_OF_INT
  | FLOOR
  | SLASH
  | PC
  | PF
  | RI
  | RF

open Parsing;;
# 2 "parser.mly"
  (* parserが利用する変数、関数、型などの定義 *)
  open Syntax
  open Lexing
    
  let addtyp x = (x, Type.gentyp ())

# 51 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST *);
  266 (* AST_DOT *);
  267 (* SLASH_DOT *);
  268 (* EQUAL *);
  269 (* LESS_GREATER *);
  270 (* LESS_EQUAL *);
  271 (* GREATER_EQUAL *);
  272 (* LESS *);
  273 (* GREATER *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  278 (* LET *);
  279 (* IN *);
  280 (* REC *);
  281 (* COMMA *);
  282 (* ARRAY_CREATE *);
  283 (* DOT *);
  284 (* LESS_MINUS *);
  285 (* SEMICOLON *);
  286 (* LPAREN *);
  287 (* RPAREN *);
    0 (* EOF *);
  288 (* FLOAT_OF_INT *);
  289 (* FLOOR *);
  290 (* SLASH *);
  291 (* PC *);
  292 (* PF *);
  293 (* RI *);
  294 (* RF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  277 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\007\000\007\000\004\000\004\000\
\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\005\000\002\000\001\000\008\000\007\000\
\002\000\004\000\003\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\001\000\004\000\002\000\001\000\002\000\001\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\043\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\052\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\083\000\022\000\063\000\057\000\023\000\065\000\091\000"

let yysindex = "\009\000\
\038\004\000\000\000\000\000\000\000\000\000\000\038\004\038\004\
\038\004\038\004\000\000\255\254\035\255\255\003\038\004\038\004\
\038\004\038\004\038\004\038\004\042\005\241\254\252\254\035\255\
\035\255\035\255\076\004\012\255\004\255\005\255\001\255\000\000\
\106\004\035\255\035\255\035\255\035\255\035\255\035\255\038\004\
\038\004\038\004\038\004\038\004\038\004\038\004\038\004\038\004\
\038\004\038\004\038\004\038\004\038\004\038\004\038\004\000\255\
\035\255\002\255\038\004\038\004\038\004\009\255\010\255\028\255\
\236\254\025\255\000\255\000\000\217\255\217\255\217\255\217\255\
\035\255\035\255\035\255\072\255\072\255\072\255\072\255\072\255\
\072\255\132\005\072\005\035\255\000\255\038\004\132\005\140\004\
\170\004\009\255\022\255\038\004\036\255\040\255\050\255\038\004\
\038\004\200\004\038\004\038\004\000\000\038\004\042\005\000\000\
\000\000\038\004\234\004\038\255\102\005\042\005\042\005\012\005\
\000\000\038\004\038\004\102\005\042\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\035\000\171\000\201\000\
\231\000\005\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\001\073\001\107\001\141\001\175\001\219\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\159\002\000\000\069\000\
\249\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\193\002\220\002\247\002\019\003\
\023\002\057\002\091\002\041\003\061\003\081\003\109\003\129\003\
\149\003\162\003\211\003\125\002\137\000\000\000\177\003\000\000\
\000\000\052\255\000\000\000\000\000\000\000\000\000\000\000\000\
\159\002\000\000\000\000\000\000\000\000\000\000\217\003\000\000\
\000\000\000\000\000\000\001\000\191\003\230\003\044\255\000\000\
\000\000\000\000\000\000\196\003\244\003"

let yygindex = "\000\000\
\255\255\105\000\000\000\000\000\000\000\000\000\234\255"

let yytablesize = 1702
let yytable = "\021\000\
\007\000\004\000\005\000\006\000\094\000\024\000\025\000\026\000\
\027\000\001\000\095\000\058\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\028\000\059\000\011\000\029\000\061\000\
\062\000\064\000\066\000\066\000\030\000\090\000\014\000\086\000\
\092\000\102\000\008\000\004\000\005\000\006\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\093\000\084\000\096\000\011\000\
\104\000\087\000\088\000\089\000\105\000\106\000\053\000\046\000\
\014\000\114\000\044\000\101\000\048\000\000\000\000\000\000\000\
\004\000\005\000\006\000\000\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\098\000\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\011\000\000\000\107\000\000\000\
\000\000\109\000\110\000\000\000\111\000\014\000\036\000\000\000\
\112\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\116\000\117\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\067\000\
\047\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\056\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\056\000\000\000\056\000\056\000\056\000\
\056\000\004\000\005\000\006\000\056\000\056\000\000\000\000\000\
\000\000\044\000\045\000\046\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\020\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\007\000\007\000\000\000\007\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\000\000\000\000\007\000\008\000\008\000\008\000\037\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\000\000\008\000\000\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\000\000\000\000\008\000\048\000\048\000\048\000\
\038\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\
\048\000\048\000\000\000\048\000\000\000\048\000\000\000\000\000\
\000\000\048\000\048\000\048\000\000\000\000\000\048\000\036\000\
\036\000\036\000\039\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\036\000\000\000\036\000\000\000\036\000\
\000\000\000\000\000\000\036\000\036\000\036\000\000\000\000\000\
\036\000\047\000\047\000\047\000\040\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\047\000\047\000\047\000\000\000\047\000\
\000\000\047\000\000\000\000\000\000\000\047\000\047\000\047\000\
\000\000\000\000\047\000\030\000\030\000\030\000\041\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\030\000\
\030\000\030\000\000\000\000\000\030\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\042\000\009\000\009\000\000\000\000\000\009\000\
\000\000\009\000\000\000\000\000\000\000\009\000\000\000\009\000\
\000\000\000\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\029\000\010\000\010\000\000\000\000\000\010\000\000\000\010\000\
\000\000\000\000\000\000\010\000\000\000\010\000\000\000\000\000\
\010\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\023\000\020\000\
\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\020\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\025\000\037\000\037\000\000\000\000\000\037\000\000\000\037\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\026\000\038\000\038\000\000\000\000\000\038\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\038\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\024\000\039\000\039\000\000\000\
\000\000\039\000\000\000\039\000\000\000\000\000\000\000\039\000\
\000\000\039\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\033\000\040\000\
\040\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\040\000\000\000\040\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\012\000\041\000\041\000\000\000\000\000\041\000\000\000\041\000\
\000\000\000\000\000\000\041\000\000\000\041\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\042\000\000\000\
\000\000\042\000\000\000\042\000\000\000\000\000\022\000\042\000\
\000\000\042\000\000\000\000\000\042\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\029\000\029\000\000\000\000\000\029\000\
\000\000\029\000\021\000\000\000\000\000\029\000\000\000\029\000\
\000\000\000\000\029\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\013\000\023\000\023\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\023\000\000\000\023\000\000\000\000\000\
\023\000\000\000\000\000\000\000\014\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\025\000\025\000\000\000\000\000\025\000\
\017\000\025\000\000\000\000\000\000\000\025\000\000\000\025\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\018\000\026\000\026\000\000\000\
\000\000\026\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\000\000\000\000\026\000\000\000\000\000\000\000\
\015\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\024\000\
\024\000\000\000\000\000\024\000\016\000\024\000\000\000\000\000\
\000\000\024\000\000\000\024\000\000\000\000\000\024\000\000\000\
\000\000\050\000\000\000\000\000\033\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\049\000\033\000\033\000\000\000\000\000\033\000\000\000\033\000\
\000\000\000\000\000\000\033\000\000\000\033\000\019\000\000\000\
\033\000\000\000\000\000\032\000\000\000\012\000\012\000\012\000\
\012\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\035\000\012\000\012\000\000\000\000\000\012\000\
\028\000\012\000\000\000\000\000\000\000\012\000\000\000\012\000\
\011\000\011\000\011\000\011\000\000\000\027\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\000\000\011\000\011\000\
\000\000\000\000\011\000\031\000\011\000\000\000\000\000\000\000\
\011\000\000\000\011\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\000\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\000\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\013\000\
\000\000\013\000\000\000\000\000\000\000\013\000\000\000\013\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\
\000\000\014\000\000\000\014\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\017\000\000\000\000\000\017\000\
\000\000\017\000\000\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\018\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\015\000\015\000\000\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\015\000\000\000\015\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\016\000\050\000\050\000\000\000\000\000\
\050\000\000\000\050\000\000\000\000\000\000\000\050\000\000\000\
\050\000\000\000\000\000\049\000\049\000\000\000\000\000\049\000\
\000\000\049\000\000\000\000\000\000\000\049\000\000\000\049\000\
\000\000\019\000\019\000\000\000\000\000\019\000\032\000\032\000\
\000\000\000\000\032\000\019\000\000\000\019\000\000\000\000\000\
\032\000\000\000\032\000\000\000\000\000\035\000\035\000\000\000\
\000\000\035\000\000\000\028\000\028\000\000\000\000\000\028\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\028\000\
\027\000\027\000\000\000\000\000\027\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\027\000\009\000\031\000\031\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\031\000\011\000\012\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\014\000\032\000\015\000\016\000\
\000\000\017\000\018\000\019\000\020\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\011\000\012\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\014\000\000\000\015\000\016\000\000\000\
\017\000\018\000\019\000\020\000\004\000\005\000\006\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\060\000\000\000\
\011\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\054\000\014\000\004\000\005\000\006\000\055\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\054\000\014\000\
\068\000\000\000\000\000\055\000\004\000\005\000\006\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\099\000\
\011\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\054\000\014\000\004\000\005\000\006\000\055\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\011\000\000\000\
\100\000\000\000\053\000\000\000\000\000\000\000\054\000\014\000\
\004\000\005\000\006\000\055\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\054\000\014\000\108\000\000\000\
\000\000\055\000\004\000\005\000\006\000\000\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\054\000\014\000\
\113\000\000\000\000\000\055\000\004\000\005\000\006\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\011\000\000\000\115\000\000\000\053\000\000\000\000\000\000\000\
\054\000\014\000\004\000\005\000\006\000\055\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\054\000\014\000\
\004\000\005\000\006\000\055\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\097\000\014\000\004\000\005\000\
\006\000\055\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\014\000\004\000\005\000\006\000\055\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\055\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\025\001\007\000\008\000\009\000\
\010\000\001\000\031\001\027\001\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\001\025\001\021\001\024\001\012\001\
\021\001\021\001\027\001\027\001\030\001\021\001\030\001\030\001\
\023\001\012\001\000\000\001\001\002\001\003\001\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\025\001\055\000\030\001\021\001\
\021\001\059\000\060\000\061\000\021\001\012\001\000\000\012\001\
\030\001\028\001\023\001\090\000\000\000\255\255\255\255\255\255\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\086\000\255\255\255\255\255\255\
\255\255\255\255\092\000\255\255\021\001\255\255\096\000\255\255\
\255\255\099\000\100\000\255\255\102\000\030\001\000\000\255\255\
\106\000\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\114\000\115\000\255\255\255\255\255\255\013\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\000\255\255\255\255\
\024\000\025\000\026\000\027\000\255\255\255\255\255\255\031\000\
\000\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\255\255\255\255\087\000\
\088\000\089\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\098\000\255\255\255\255\255\255\255\255\103\000\
\255\255\255\255\255\255\107\000\255\255\109\000\110\000\111\000\
\112\000\001\001\002\001\003\001\116\000\117\000\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\255\255\255\255\034\001\001\001\002\001\003\001\
\000\000\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\031\001\255\255\255\255\034\001\001\001\
\002\001\003\001\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\255\255\255\255\
\034\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\034\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\034\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\000\000\029\001\
\255\255\031\001\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\000\000\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\000\000\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\034\001\255\255\255\255\255\255\
\000\000\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\000\000\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\034\001\255\255\
\255\255\000\000\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\000\000\255\255\
\034\001\255\255\255\255\000\000\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\000\000\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\005\001\006\001\007\001\008\001\255\255\000\000\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\000\000\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\019\001\020\001\255\255\255\255\023\001\019\001\020\001\
\255\255\255\255\023\001\029\001\255\255\031\001\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\031\001\
\019\001\020\001\255\255\255\255\023\001\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\031\001\007\001\019\001\020\001\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\031\001\021\001\022\001\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\021\001\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\003\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\034\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\003\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\001\001\002\001\003\001\034\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\031\001\255\255\
\255\255\034\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\034\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\003\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\001\001\002\001\003\001\034\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\001\001\002\001\
\003\001\034\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\025\001\255\255\
\255\255\255\255\255\255\030\001\001\001\002\001\003\001\034\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\255\255\034\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  FLOAT_OF_INT\000\
  FLOOR\000\
  SLASH\000\
  PC\000\
  PF\000\
  RI\000\
  RF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 71 "parser.mly"
      ( _2 )
# 655 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
   ( Unit )
# 661 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 75 "parser.mly"
       ( Bool(_1) )
# 668 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 77 "parser.mly"
    ( Int(_1) )
# 675 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 79 "parser.mly"
        ( Float(_1) )
# 682 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 81 "parser.mly"
      ( Var(_1) )
# 689 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 83 "parser.mly"
         (
				let p = Parsing.rhs_start_pos 2 in
				  Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Get(_1, _4)) )
# 699 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 89 "parser.mly"
      ( _1 )
# 706 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(_2)) )
# 715 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, match _2 with
	   | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
	   | e -> Neg(e)) )
# 726 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Add(_1, _3)) )
# 736 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Sub(_1, _3)) )
# 746 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=0 }, Eq(_1, _3)) )
# 756 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(Eq(_1, _3))) )
# 766 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
      (
		      let p = Parsing.rhs_start_pos 2 in
			Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_3, _1))) )
# 776 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
   (
			  let p = Parsing.rhs_start_pos 2 in
			    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_1, _3))) )
# 786 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
       (
			      let p = Parsing.rhs_start_pos 2 in
				Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_1, _3)) )
# 796 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    (
				  let p = Parsing.rhs_start_pos 2 in
				    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_3, _1)) )
# 806 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 136 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, If(_2, _4, _6)) )
# 817 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FNeg(_2)) )
# 826 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 145 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FAdd(_1, _3)) )
# 836 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 149 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FSub(_1, _3)) )
# 846 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 153 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Mul(_1, _3)) )
# 856 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 157 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Div(_1, _3)) )
# 866 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 161 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FMul(_1, _3)) )
# 876 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 165 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FDiv(_1, _3)) )
# 886 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 170 "parser.mly"
( Let(addtyp _2, _4, _6) )
# 895 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
(
  let p = Parsing.rhs_start_pos 3 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol }, LetRec(_3, _5)) )
# 905 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 178 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, App(_1, _2)) )
# 915 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 182 "parser.mly"
    ( Tuple(_1) )
# 922 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 184 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 1 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LetTuple(_3, _6, _8)) )
# 933 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 188 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 6 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Put(_1, _4, _7)) )
# 944 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 192 "parser.mly"
  ( _1 )
# 951 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 194 "parser.mly"
  ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 959 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 196 "parser.mly"
      ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 967 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 199 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Array(_2, _3)) )
# 977 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 204 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Float_of_int(_2)) )
# 986 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 209 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Floor(_2)) )
# 995 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 214 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Pc(_2)) )
# 1004 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 219 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Pf(_2)) )
# 1013 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 224 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Ri(_2)) )
# 1022 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 229 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Rf(_2)) )
# 1031 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
    (
      failwith
	(Printf.sprintf "parse error near lines %d, characters %d"
	   !line_num
	   (Parsing.symbol_start () - !char_num + 2) )
    )
# 1042 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 242 "parser.mly"
 ( { name = addtyp _1; args = _2; body = _4 } )
# 1051 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 246 "parser.mly"
     ( addtyp _1 :: _2 )
# 1059 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 248 "parser.mly"
  ( [addtyp _1] )
# 1066 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 253 "parser.mly"
( _1 @ [_2] )
# 1074 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 256 "parser.mly"
( [_1] )
# 1081 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 260 "parser.mly"
    ( _1 @ [_3] )
# 1089 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 262 "parser.mly"
 ( [_1; _3] )
# 1097 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 266 "parser.mly"
     ( _1 @ [addtyp _3] )
# 1105 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 268 "parser.mly"
  ( [addtyp _1; addtyp _3] )
# 1113 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
